//file:noinspection GroovyAssignabilityCheck

import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id("java-library")
    id("idea")
    id("maven-publish")
    id("net.neoforged.moddev") version "$moddevgradle_version"
    id("org.jetbrains.kotlin.jvm") version "$kotlin_version"
}

version = mod_version
group = mod_group_id
base.archivesName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
compileKotlin.compilerOptions.jvmTarget = JvmTarget.JVM_21


neoForge {
    version = neo_version

    validateAccessTransformers = true

    parchment {
        minecraftVersion = parchment_minecraft_version
        mappingsVersion = parchment_mapping_version
    }

    runs {
        configureEach {
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }

        client {
            client()
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        /**
         // This run config launches GameTestServer and runs all registered gametests, then exits.
         // By default, the server will crash when no gametests are provided.
         // The gametest system is also enabled by default for other run configs under the /test command.
         gameTestServer {
         type = "gameTestServer"
         systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
         } */

        data {
            data()
            // workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Hack to fix Netty dependency conflicts: we simple force all configurations to use Minecraft's Netty versions

def mcNettyVersion
def mcNettyDeps = []
configurations { mcDepsGetter {} }
dependencies { mcDepsGetter("net.neoforged:minecraft-dependencies:$minecraft_version") }

configurations {
    ktorLib {}

    // get MC Netty libs
    mcDepsGetter.resolvedConfiguration.getResolvedArtifacts().each {
        if (it.moduleVersion.id.group == "io.netty") {
            println("MC Netty dependency: $it.moduleVersion.id")
            mcNettyDeps.add(it.moduleVersion.id)
        }
    }

    // get MC Netty version
    mcNettyVersion = mcNettyDeps.getFirst().version
    println("MC Netty version: $mcNettyVersion")

    configureEach { cfg ->
        if (cfg != mcDepsGetter && !cfg.name.startsWith("neoForm")) {
            // force MC Netty module versions
            resolutionStrategy {
                mcNettyDeps.each {
                    force(it.toString())
                }

                // force all Netty modules to use MC's version; not needed and causes more problems
                /** eachDependency {
                 if (it.requested.group == "io.netty"
                 && it.requested.name != "netty-transport-native-epoll") { // not sure why this one cause problems
                 println("Forcing $it.requested.name on $cfg to $mcNettyVersion")
                 it.useVersion(mcNettyVersion)
                 }
                 } */
            }
        }
    }

    // Workaround confliction with Jar-In-Jar of CC-Tweaked
    // THIS DOESN'T ACTUALLY WORK
//    additionalRuntimeClasspath.exclude(group: "io.netty", module: "netty-codec-http")
}

dependencies {
    // Use slim artifact of KFF to avoid kotlin lib conflictions
    implementation("thedarkcolour:kotlinforforge-neoforge:$kff_version:slim")

    // Ktor
    ktorLib("io.ktor:ktor-server-core-jvm:$ktor_version")
    ktorLib("io.ktor:ktor-server-websockets-jvm:$ktor_version")
    ktorLib("io.ktor:ktor-server-netty-jvm:$ktor_version")

    // Add dependencies to Jar-In-Jar
    configurations.ktorLib.resolvedConfiguration.resolvedArtifacts.each {
        def dep = it.moduleVersion.id
        if (dep in mcNettyDeps || dep.group == "org.slf4j") {
            println("Ignoring $dep for Jar-In-Jar: included by MC")
        } else if (dep.group == "org.jetbrains.kotlin" || dep.group == "org.jetbrains.kotlinx") {
            println("Ignoring $dep for Jar-In-Jar: included by KFF")
        } else if (dep.name == "annotations") {
            println("Ignoring $dep for Jar-In-Jar: not needed for runtime")
        } else {
            println("Adding $dep to Jar-In-Jar")
            jarJar("$dep.group:$dep.name") {
                version {
                    prefer(dep.version)
                    strictly(dep.version) // soft requirement, allows for any version
                }
            }
        }
    }

    // Configure Ktor libs for compilation & dev runtime
    configurations.ktorLib.allDependencies.each {
        implementation(it)
        additionalRuntimeClasspath(it)
    }

    // TheOneProbe
    implementation("curse.maven:theoneprobe-245211:$top_version_id")

    // JourneyMap
    implementation("curse.maven:journeymap-32274:$journeymap_version_id")

    // REI
    api("dev.architectury:architectury-neoforge:$architectury_version")
    api("me.shedaniel.cloth:cloth-config-neoforge:$cloth_config_version")
    api("me.shedaniel:RoughlyEnoughItems-neoforge:$rei_version")

    // CC:Tweaked
    compileOnly("cc.tweaked:cc-tweaked-$minecraft_version-core-api:$cct_version")
    compileOnly("cc.tweaked:cc-tweaked-$minecraft_version-forge-api:$cct_version")
    // TODO: figure out how to avoid `netty-codec-http` (jar-in-jar) confliction
//    runtimeOnly("cc.tweaked:cc-tweaked-$minecraft_version-forge:$cct_version")
}

repositories {
    mavenCentral()
    mavenLocal()

    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }

    maven { url "https://maven.shedaniel.me/" }

    maven {
        url "https://maven.squiddev.cc"
        content {
            includeGroup("cc.tweaked")
        }
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir("src/generated/resources") }

// Sets up a dependency configuration called "localRuntime".
// This configuration should be used instead of "runtimeOnly" to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom(localRuntime)
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            kff_version            : kff_version,
            kff_version_range      : kff_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_version            : mod_version
    ]
    inputs.properties(replaceProperties)

    filesMatching(["META-INF/neoforge.mods.toml", "*.mixins.json"]) {
        expand(replaceProperties)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

tasks.named("wrapper", Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}
